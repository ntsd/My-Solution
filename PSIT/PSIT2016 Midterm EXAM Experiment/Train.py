"""Exam9: Train I

ในที่สุดคุณก็ได้รับคำยืนยันว่าคุณสามารถกลับสู่โลกของคุณได้
โดยที่คุณจะต้องนั่งรถไฟไปที่อีกเมืองหนึ่ง
โดยที่คุณจะต้องกดซื้อตั๋วรถไฟ โดยที่แผนที่การเดินรถไฟของโลกคู่ขนานมีดังรูปนี้ (อย่าไปสนใจรูปข้างบน นั่นมันรูปประกอบที่ลงเพื่อนให้ดูสวยๆ)


แผนที่การเดินรถไฟนั้นมีการออกแบบที่สมบูรณ์แบบ
แบ่งผู้ให้บริการเดินรถไฟเป็นผู้ให้บริการ A, B, C, D, … และมีสถานีตั้งแต่ 1, 2, 3, 4, …
ซึ่งจำนวนผู้ให้บริการนั้นมีเยอะมาก จนเมื่ออักษรใช้ครบถึงตัว Z แล้ว จะเริ่มใช้อักษรสองหลัก
เป็น AA ซึ่งอยู่ถัดจาก Z และ AAA ก็อยู่ถัดจาก ZZ เป็นเช่นนี้ไปเรื่อยๆ (AAA, AAAA, ...) หมายเลขสถานีก็เช่นกัน (7, 8, 9, 10, 11, 12, ..., 100, 1000, 10000, ...)
หากยังไม่เข้าใจให้ดู Sample I/O ประกอบ

ซึ่งเรื่องราคาค่ารถไฟไม่ได้เป็นปัญหาสำหรับคุณ
ที่มีปัญหาคือเครื่องกดตั๋วต่างหาก คุณจะต้องกดจำนวนสถานีที่จะต้องเดินทางให้ตรงกับความจริง
อย่างเช่นถ้าคุณเริ่มต้นจากสถานี B2 ไปยังสถานี D6

คุณสามารถเลือกเดินทางไปทางใดก็ได้ ระหว่างลงไปสถานี B6 แล้วค่อยต่อรถไป D6
B2 -> B6 -> D6
หรือจะไป D2 ก่อนแล้วค่อยลงไป D6 ก็ได้
จำนวนสถานีที่นั่งก็จะเท่ากัน หรือคุณจะนั่งยังไงก็ได้ที่ยังอยู่ในเส้นทาง ลง หรือ ไปทางขวา
ก็จะได้จำนวนสถานีเท่ากันทั้งหมด ซึ่งจะมีจำนวนความเป็นไปได้เท่ากับ 6!/(4!2!) = 15 วิธี
ซึ่งชั่งมันเถอะ คุณไม่ได้ต้องการทราบจำนวนวิธีที่เป็นไปได้ในการเดินทาง

คุณต้องการทราบเพียงว่าจะต้องเดินทางไปทั้งหมดกี่สถานี ซึ่งจาก B2 -> D6 จะเดินทางผ่านทั้งหมด 6 สถานี (รวมสถานีปลายทาง)
ซึ่งเป็นจำนวนที่น้อยที่สุดที่เป็นไปได้แล้ว ทั้ง 15 วิธี
แต่ถ้าคุณเดินทางออกนอกเส้นทาง เช่นไปทาง ขวา หรือ ขึ้น ก็จะต้องผ่านสถานีในจำนวนที่มากขึ้น ซึ่งเป็นความเสียเปล่า

ลองดูอีกตัวอย่าง
จาก Y6 ไป AC12
คุณจะเดินทางจาก Y6 ไป AC6 เป็นจำนวน 4 สถานี (->Z6->AA6->AB6->AC6)
และค่อยนั่งไปยัง AC12 อีก 6 สถานี (->AC7->AC8->AC9->AC10->AC11->AC12)
รวมเป็น 10 สถานี
 
by นายพิชาธร เอกอุ่น 
1 October 2016, 20:58
 Specification
 Input Specification	 Output Specification

สองบรรทัด
สถานีต้นทาง
สถานีปลายทาง
เป็นอักษรภาษาอังกฤษพิมพ์ใหญ่เท่านั้นต่อกับตัวเลข มีความยาวรวมกัน 2 ตัวอักษรขึ้นไป 

บรรทัดเดียว
จำนวนสถานีที่ต้องเดินทางไปถึงปลายทาง (รวมปลายทาง) เป็นจำนวนนับ

  
 Sample Case
 Sample Input	 Sample Output
B2
D6
6
Y6
AC12
10
AC220
DC12
286
"""
def train(station1, station2):
    """..."""
    lis = []
    for string in (station1, station2):
        letter = " ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        let = 0
        num = ""
        loop = 0
        for i in string[::-1]:
            if i in letter:
                let += (26**loop)*letter.index(i)
                loop += 1
            else:
                num = i + num
        lis.append([let, int(num)])
    print(abs(lis[0][0]-lis[1][0])+abs(lis[0][1]-lis[1][1]))
train(input(), input())
